{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Alert Logic template for creating a Poll based log collector",
    "Parameters": {
        "AlertlogicAccessKeyId": {
            "Description": "Alert Logic Access Key Id obtained from AIMS",
            "Type": "String"
        },
        "AlertlogicSecretKey": {
            "Description": "Alert Logic Secret Key returned from AIMS for the Access Key Id",
            "Type": "String",
            "NoEcho": true
        },
        "AlApiEndpoint": {
            "Description": "Alert Logic API endpoint",
            "Type": "String",
            "Default": "api.global-services.global.alertlogic.com",
            "AllowedValues": [
                "api.global-services.global.alertlogic.com",
                "api.global-integration.product.dev.alertlogic.com"
            ]
        },
        "AlDataResidency": {
            "Description": "Alert Logic Data Residency",
            "Type": "String",
            "Default": "default",
            "AllowedValues": ["default"]
        },
        "PackagesBucketPrefix": {
            "Description": "S3 bucket name prefix where collector packages are located.",
            "Type": "String",
            "Default": "alertlogic-collectors"
        },
        "PawsCollectorTypeName": {
            "Description": "A collector type name. For example, okta, auth0",
            "Type": "String"
        },
        "CollectorFunctionMemorySize": {
            "Description": "Memory size for a collector function",
            "Type": "Number",
            "Default": 256
        },
        "CollectorFunctionTimeout": {
            "Description": "Invocation timeout for a collector function.",
            "Type": "Number",
            "Default" : 300
        },
        "AlertlogicCustomerId": {
            "Description": "Optional. Alert Logic customer ID which collected data should be reported for. If not set customer ID is derived from AIMs tokens",
            "Type": "String",
            "Default": ""
        },
        "CollectorId": {
            "Description": "Optional. A collector UUID if known.",
            "Type": "String",
            "Default": "none"
        },
        "PollingInterval": {
            "Description": "Interval in seconds between two consecutive poll requests.",
            "Type": "Number",
            "Default": 60
        },
        "PawsEndpoint": {
            "Description": "URL to poll",
            "Type": "String"
        },
        "PawsAuthType": {
            "Description": "Target API authentication type. Supported types: ssws, oauth2",
            "Type": "String",
            "Default": "ssws"
        },
        "PawsClientId": {
            "Description": "Client ID for oauth2 authentication type",
            "Type": "String",
            "Default": ""
        },
        "PawsSecret": {
            "Description": "Client secret for oauth2 or secret token for ssws.",
            "Type": "String",
            "NoEcho": true
        },
        "PawsMaxPagesPerInvocation" :{
            "Description": "The maximum number of pages of content data retrieved per invocation",
            "Type": "Number",
            "Default": 10
        },
        "PawsCredsS3Uri": {
            "Description": "The S3 uri where object where credentials are stored. in the for s3://<bucket>/<object-path> Only used when PawsAuthType is 's3object'",
            "Type": "String",
            "AllowedPattern" : "^s3:\/\/[a-z,\-,0-9]*\/[a-z,\-,\.,\_,0-9]*",
            "Default": ""
        },
        "CollectionStartTs": {
            "Description": "Optional. Timestamp when log collection starts. For example, 2020-01-13T16:00:00Z.",
            "Type": "String",
            "AllowedPattern" : "(?:^\\d{4}(-\\d{2}){2}T(\\d{2}:){2}\\d{2}Z$)?"
        },
        "CollectorParamString1" :{
            "Description": "Collector specific string type parameter 1.",
            "Type": "String",
            "Default": ""
        },
        "CollectorParamString2" :{
            "Description": "Collector specific string type parameter 2.",
            "Type": "String",
            "Default": ""
        }
    },
    "Resources":{
      "CollectLambdaRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "Path":"/",
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            }
         }
      },
        "LambdaKmsKey": {
            "Type": "AWS::KMS::Key",
            "DependsOn":[
                "CollectLambdaRole",
                "EncryptLambdaRole"
            ],
            "Properties": {
               "Description": "kms key used to encrypt credentials for lambda",
               "KeyPolicy": {
                    "Version": "2012-10-17",
                    "Id": "al-kms-policy",
                    "Statement": [
                        {
                            "Sid": "Enable IAM User Permissions",
                            "Effect": "Allow",
                            "Principal": {
                            "AWS": {
                             "Fn::Join": [
                               ":",
                               [
                                 "arn:aws:iam",
                                 "",
                                 {
                                   "Ref": "AWS::AccountId"
                                 },
                                 "root"
                               ]
                             ]
                            }
                            },
                            "Action": "kms:*",
                            "Resource": "*"
                       },
                       {
                            "Sid": "Allow use of the key for lambda",
                            "Effect": "Allow",
                            "Principal": {
                              "AWS": {
                                "Fn::GetAtt": [
                                  "CollectLambdaRole",
                                  "Arn"
                                ]
                              }
                            },
                            "Action": [
                              "kms:Decrypt",
                              "kms:Encrypt"
                            ],
                            "Resource": "*"
                       },
                       {
                          "Sid": "Allow use of the key for lambda encryption",
                          "Effect": "Allow",
                          "Principal": {
                             "AWS": {
                                "Fn::GetAtt": [
                                   "EncryptLambdaRole",
                                   "Arn"
                                ]
                             }
                          },
                          "Action": [
                             "kms:Encrypt"
                          ],
                          "Resource": "*"
                       }
                    ]
                },
                "Tags": [
                    {
                        "Key": "AlertLogic",
                        "Value": "Collect"
                    }
                ]
            }
        },
        "BasicLambdaRole":{
            "Type":"AWS::IAM::Role",
            "Properties":{
                "Path":"/",
                "AssumeRolePolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Principal":{
                                "Service":[
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                   ]
                }
            }
        },
        "EncryptLambdaRole":{
            "Type":"AWS::IAM::Role",
            "Properties":{
                "Path":"/",
                "AssumeRolePolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Principal":{
                                "Service":[
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                   ]
                }
            }
        },
        "EncryptLambdaPolicy":{
            "Type":"AWS::IAM::Policy",
            "DependsOn":[
                "EncryptLambdaRole",
                "EncryptLambdaFunction"
            ],
            "Properties":{
                "Roles":[
                   {
                      "Ref":"EncryptLambdaRole"
                   }
                ],
                "PolicyName":"alertlogic-encrypt-lambda-policy",
                "PolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Action":"logs:CreateLogGroup",
                            "Resource":[
                                {
                                    "Fn::Join":[
                                        "",
                                        [
                                            "arn:aws:logs:",
                                            {
                                                "Ref":"AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref":"AWS::AccountId"
                                            },
                                            ":log-group:/aws/lambda/",
                                            {
                                                "Ref":"EncryptLambdaFunction"
                                            },
                                            ":*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Effect":"Allow",
                            "Action":[
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource":[
                                {
                                   "Fn::Join":[
                                        "",
                                        [
                                            "arn:aws:logs:",
                                            {
                                                "Ref":"AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref":"AWS::AccountId"
                                            },
                                            ":log-group:/aws/lambda/",
                                            {
                                                "Ref":"EncryptLambdaFunction"
                                            },
                                            ":log-stream:*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "EncryptLambdaFunction":{
            "Type":"AWS::Lambda::Function",
            "DependsOn":[
                "EncryptLambdaRole"
            ],
            "Properties":{
                "Description":"Alert Logic Lambda Encrypt function",
                "Role":{
                    "Fn::GetAtt":[
                        "EncryptLambdaRole",
                        "Arn"
                    ]
                },
                "Code":{
                    "ZipFile": {
                       "Fn::Join": [
                           "",
                           [
                                "const AWS = require('aws-sdk');\n",
                                "const response = require('./cfn-response');\n",
                                "\n",
                                "\n",
                                "function encrypt(event, context) {\n",
                                "    const params = {\n",
                                "        KeyId: event.ResourceProperties.KeyId,\n",
                                "        Plaintext: event.ResourceProperties.Plaintext\n",
                                "    };\n",
                                "    const kms = new AWS.KMS();\n",
                                "    kms.encrypt(params, function(err, data) {\n",
                                "        if (err) {\n",
                                "            console.log(err, err.stack); // an error occurred\n",
                                "            return response.send(event, context, response.FAILED);\n",
                                "        }\n",
                                "        var base64 = new Buffer(data.CiphertextBlob).toString('base64');\n",
                                "        var responseData = {\n",
                                "            EncryptedText : base64\n",
                                "        };\n",
                                "        return response.send(event, context, response.SUCCESS, responseData);\n",
                                "    });\n",
                                "}\n",
                                "\n",
                                "\n",
                                "exports.handler = (event, context, callback) => {\n",
                                "    if (event.ResourceType == 'AWS::CloudFormation::CustomResource' &&\n",
                                "        event.RequestType == 'Create' &&\n",
                                "        event.ResourceProperties.Plaintext.length  > 0) {\n",
                                "        return encrypt(event, context);\n",
                                "    }\n",
                                "    return response.send(event, context, response.SUCCESS, {EncryptedText: \"\"});\n",
                                "}"
                            ]
                        ]
                    }
                },
                "Handler":"index.handler",
                "Runtime":"nodejs10.x",
                "MemorySize":128,
                "Timeout": 5,
                "Tags": [
                    {
                        "Key": "AlertLogic",
                        "Value": "Collect"
                    }
                ]
            }
        },
        "EncryptSecretKeyCustomResource": {
            "Type": "AWS::CloudFormation::CustomResource",
            "DependsOn": [
                "LambdaKmsKey",
                "EncryptLambdaFunction",
                "EncryptLambdaPolicy"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "EncryptLambdaFunction",
                        "Arn"
                    ]
                },
                "KeyId": {
                    "Fn::GetAtt": [
                        "LambdaKmsKey",
                        "Arn"
                    ]
                },
                "Plaintext": {
                    "Ref": "AlertlogicSecretKey"
                }
            }
        },
        "EncryptPawsSecret": {
            "Type": "AWS::CloudFormation::CustomResource",
            "DependsOn": [
                "LambdaKmsKey",
                "EncryptLambdaFunction",
                "EncryptLambdaPolicy"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "EncryptLambdaFunction",
                        "Arn"
                    ]
                },
                "KeyId": {
                    "Fn::GetAtt": [
                        "LambdaKmsKey",
                        "Arn"
                    ]
                },
                "Plaintext": {
                    "Ref": "PawsSecret"
                }
            }
        },
      "PawsPollStateQueue":{
        "Type":"AWS::SQS::Queue",
        "DependsOn":[
         ],
         "Properties":{
            "QueueName" : {
             "Fn::Join": [
               "-",
               [
                 {
                   "Ref": "AWS::StackName"
                 },
                 "paws-collection-state"
               ]
             ]
            },
            "VisibilityTimeout": 900,
            "MessageRetentionPeriod": 1209600
         }
      },
      "CollectLambdaFunction":{
         "Type":"AWS::Lambda::Function",
         "DependsOn":[
            "CollectLambdaRole",
            "LambdaKmsKey",
            "EncryptSecretKeyCustomResource",
            "EncryptPawsSecret",
            "PawsPollStateQueue"
         ],
         "Properties":{
            "Description":"Alert Logic Poll based collector",
            "FunctionName":{ "Ref":"AWS::StackName" },
            "Role":{
               "Fn::GetAtt":[
                  "CollectLambdaRole",
                  "Arn"
               ]
            },
            "KmsKeyArn": {
               "Fn::GetAtt": [
                  "LambdaKmsKey",
                  "Arn"
               ]
            },
            "Code":{
               "S3Bucket":{"Fn::Join" : ["", [
                    {"Ref":"PackagesBucketPrefix"}, "-",
                    { "Ref" : "AWS::Region" }
               ]]},
               "S3Key": {"Fn::Join" : ["", [
                    "packages/lambda/al-",
                    { "Ref" : "PawsCollectorTypeName" },
                    "-collector.zip"
               ]]}
            },
            "Handler":"index.handler",
            "Runtime":"nodejs10.x",
            "MemorySize": { "Ref" : "CollectorFunctionMemorySize" },
            "Timeout": { "Ref" : "CollectorFunctionTimeout" },
            "Environment":{
               "Variables":{
                  "aims_access_key_id": {
                      "Ref":"AlertlogicAccessKeyId"
                  },
                  "aims_secret_key":{
                      "Fn::GetAtt": ["EncryptSecretKeyCustomResource", "EncryptedText"]
                  },
                  "aws_lambda_s3_bucket":{"Fn::Join" : ["", [
                      {"Ref":"PackagesBucketPrefix"}, "-",
                      {"Ref":"AWS::Region"}
                  ]]},
                  "aws_lambda_zipfile_name": {"Fn::Join" : ["", [
                      "packages/lambda/al-",
                      { "Ref" : "PawsCollectorTypeName" },
                      "-collector.zip"
                   ]]}, 
                  "aws_lambda_update_config_name": {"Fn::Join" : ["", [
                      "configs/lambda/al-",
                      { "Ref" : "PawsCollectorTypeName" },
                      "-collector.json"
                  ]]},
                  "al_api":{
                      "Ref":"AlApiEndpoint"
                  },
                  "al_data_residency":{
                      "Ref":"AlDataResidency"
                  },
                  "customer_id": {
                      "Ref":"AlertlogicCustomerId"
                  },
                  "collector_id": {
                      "Ref":"CollectorId"
                  },
                  "paws_state_queue_arn":{
                      "Fn::GetAtt" : ["PawsPollStateQueue", "Arn"]
                  },
                  "paws_state_queue_url":{
                      "Ref" : "PawsPollStateQueue"
                  },
                  "paws_poll_interval": {
                      "Ref":"PollingInterval"
                  },
                  "paws_endpoint":{
                      "Ref":"PawsEndpoint"
                  },
                  "paws_api_auth_type":{
                      "Ref":"PawsAuthType"
                  },
                  "paws_api_client_id":{
                      "Ref":"PawsClientId"
                  },
                  "paws_kms_key_arn":{
                      "Fn::GetAtt": [ "LambdaKmsKey", "Arn" ]
                  },
                  "paws_api_secret":{
                      "Fn::GetAtt": ["EncryptPawsSecret", "EncryptedText"]
                  },
                  "paws_s3_object_path":{
                      "Ref": "PawsCredsS3Uri"
                  },
                  "paws_collection_start_ts":{
                      "Ref":"CollectionStartTs"
                  },
                  "stack_name": {
                      "Ref":"AWS::StackName"
                  },
                  "paws_type_name":{
                      "Ref":"PawsCollectorTypeName"
                  },
                  "paws_max_pages_per_invocation": {
                    "Ref":"PawsMaxPagesPerInvocation"
                  },
                  "paws_collector_param_string_1": {
                    "Ref": "CollectorParamString1"
                  },
                  "paws_collector_param_string_2": {
                    "Ref": "CollectorParamString2"
                  }
               }
            },
            "Tags": [
                {
                    "Key": "AlertLogic",
                    "Value": "Collect"
                }
            ]
         }
      },
      "CollectLambdaEventSourceMapping":{
         "Type":"AWS::Lambda::EventSourceMapping",
         "DependsOn":[
            "CollectLambdaFunction",
            "CollectLambdaRole",
            "CollectLambdaPolicy",
            "PawsPollStateQueue"
         ],
         "Properties":{
            "EventSourceArn" : { "Fn::GetAtt" : ["PawsPollStateQueue", "Arn"] },
            "FunctionName" : { "Ref":"CollectLambdaFunction" }
         }
      },
      "CollectLambdaPolicy":{
         "Type":"AWS::IAM::Policy",
         "DependsOn":[
            "CollectLambdaFunction",
            "CollectLambdaRole"
         ],
         "Properties":{
            "Roles":[
               {
                  "Ref":"CollectLambdaRole"
               }
            ],
            "PolicyName":"alertlogic-paws-lambda-policy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":"logs:CreateLogGroup",
                     "Resource":[{
                       "Fn::Join":[ "",
                          [
                             "arn:aws:logs:", { "Ref":"AWS::Region" },
                             ":", { "Ref":"AWS::AccountId" },
                             ":log-group:/aws/lambda/", { "Ref":"CollectLambdaFunction" },
                             ":*"
                          ]
                       ]
                     }]
                  },
                  {
                      "Effect":"Allow",
                      "Action":"s3:Get*",
                      "Resource":[
                          {
                             "Fn::Join":["",
                                [
                                   "arn:aws:s3:::",
                                   { "Fn::Select": ["1", {"Fn::Split": ["//", {"Ref": "PawsCredsS3Uri"}] } ] }
                                ]
                             ]

                          }
                      ]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                     ],
                     "Resource":[ {
                       "Fn::Join":["",
                          [
                             "arn:aws:logs:", { "Ref":"AWS::Region" },
                             ":", { "Ref":"AWS::AccountId" },
                             ":log-group:/aws/lambda/", { "Ref":"CollectLambdaFunction" },
                             ":log-stream:*"
                          ]
                       ]
                     }]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "lambda:*"
                     ],
                     "Resource":[{
                       "Fn::GetAtt":[
                           "CollectLambdaFunction",
                           "Arn"
                       ]
                     }]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "s3:Get*"
                     ],
                     "Resource":[{
                       "Fn::Join":["",
                          [
                             "arn:aws:s3:::",
                             {
                                "Fn::Join" : ["", [
                                    { "Ref" : "PackagesBucketPrefix" }, "-",
                                    { "Ref" : "AWS::Region" }
                                ]]
                             },
                             "/*"
                          ]
                       ]
                     }]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "sqs:*"
                     ],
                     "Resource":[{
                       "Fn::GetAtt":[
                           "PawsPollStateQueue",
                           "Arn"
                       ]
                     }]
                  }
               ]
            }
         }
      },
      "HealthCheckLambdaPolicy":{
         "Type":"AWS::IAM::Policy",
         "DependsOn":[
              "CollectLambdaRole"
         ],
         "Properties":{
            "Roles":[
               {
                  "Ref":"CollectLambdaRole"
               }
            ],
            "PolicyName":"alertlogic-health-check-lambda-policy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "cloudformation:DescribeStacks"
                     ],
                     "Resource": "*"
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "lambda:ListEventSourceMappings"
                     ],
                     "Resource": "*"
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "cloudwatch:Get*",
                        "cloudwatch:Describe*",
                        "cloudwatch:List*"
                     ],
                     "Resource": "*"
                  }
               ]
            }
         }
      },
      "UpdaterScheduledRule": {
         "Type": "AWS::Events::Rule",
         "DependsOn": [
            "CollectLambdaPolicy",
            "CollectLambdaFunction"
         ],
         "Properties": {
            "Description": "Scheduled rule for updater function",
            "ScheduleExpression": "rate(12 hours)",
            "State": "ENABLED",
            "Targets":[
                {
                    "Id":"1",
                    "Arn":{
                        "Fn::GetAtt":[
                            "CollectLambdaFunction",
                            "Arn"
                        ]
                    },
                    "Input": "{\"RequestType\": \"ScheduledEvent\", \"Type\": \"SelfUpdate\"}"
                }
            ]
         }
      },
      "UpdaterScheduledRuleLambdaInvokePermission": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "CollectLambdaFunction",
            "CollectLambdaPolicy",
            "UpdaterScheduledRule"
          ],
          "Properties": {
            "Action": "lambda:InvokeFunction",
            "FunctionName": {
              "Ref": "CollectLambdaFunction"
            },
            "Principal": "events.amazonaws.com",
            "SourceArn":{
              "Fn::GetAtt": [
                "UpdaterScheduledRule",
                "Arn"
              ]
            }
          }
      },
      "CloudWatchEventsRole":{
         "Type": "AWS::IAM::Role",
         "DependsOn":[
            "CollectLambdaFunction",
            "CollectLambdaPolicy"
         ],
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version" : "2012-10-17",
               "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [ "events.amazonaws.com" ]
                  },
                  "Action": [ "sts:AssumeRole" ]
               } ]
            },
            "Path": "/",
            "Policies": [ {
               "PolicyName": "root",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [
                    {
                      "Effect":"Allow",
                      "Action":[
                         "lambda:*"
                      ],
                      "Resource":[{
                          "Fn::GetAtt":[
                              "CollectLambdaFunction",
                              "Arn"
                          ]
                      }]
                    }
                  ]
               }
            }]
         }
      },
      "CheckinScheduledRule": {
         "Type": "AWS::Events::Rule",
         "DependsOn": [
            "CollectLambdaFunction",
            "CollectLambdaPolicy",
            "HealthCheckLambdaPolicy"
         ],
         "Properties": {
            "Description": "Scheduled rule for checkin function",
            "ScheduleExpression": "rate(15 minutes)",
            "State": "ENABLED",
            "Targets":[
                {
                    "Id":"1",
                    "Arn":{
                        "Fn::GetAtt":[
                            "CollectLambdaFunction",
                            "Arn"
                        ]
                    },
                    "Input": {
                        "Fn::Join":[
                            "",
                            [
                                "{\"RequestType\": \"ScheduledEvent\", \"Type\": \"Checkin\", \"AwsAccountId\": \"",
                                { "Ref":"AWS::AccountId" },
                                "\", \"Region\": \"",
                                { "Ref": "AWS::Region" },
                                "\", \"StackName\": \"",
                                { "Ref":"AWS::StackName" },
                                "\"}"
                            ]
                        ]
                    }
                }
            ]
         }
      },
      "CheckinScheduledRuleLambdaInvokePermission": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "CollectLambdaFunction",
            "CollectLambdaPolicy",
            "HealthCheckLambdaPolicy",
            "CheckinScheduledRule"
          ],
          "Properties": {
            "Action": "lambda:InvokeFunction",
            "FunctionName": {
              "Ref": "CollectLambdaFunction"
            },
            "Principal": "events.amazonaws.com",
            "SourceArn":{
              "Fn::GetAtt": [
                "CheckinScheduledRule",
                "Arn"
              ]
            }
          }
      },
      "RegistrationResource": {
         "Type": "Custom::RegistrationResource",
         "DependsOn": [
            "CollectLambdaFunction",
            "CollectLambdaPolicy"
         ],
         "Properties": {
            "ServiceToken": { "Fn::GetAtt" : ["CollectLambdaFunction", "Arn"] },
            "StackName": { "Ref" : "AWS::StackName" },
            "AwsAccountId": { "Ref": "AWS::AccountId"}
         }
      }
   }
}
