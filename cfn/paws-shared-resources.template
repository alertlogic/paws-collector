{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Alert Logic template for creating one set of AWS resource shared between all collectors in one AWS account",
    "Parameters": {
        "PackagesBucketPrefix": {
            "Description": "S3 bucket name prefix where collector packages are located.",
            "Type": "String",
            "Default": "alertlogic-collectors"
        },
        "SharedResourcePrefix": {
            "Description": "Shared resource name prefix.",
            "Type": "String",
            "Default": "Al"
        },
        
        "ExistingDedupDdbTableName": {
            "Description": "The table name PAWS collectors use for state deduplication.",
            "Type": "String",
            "Default": "PawsCollectorStates"
        }
    },
    "Conditions":{
        "createDdbTable": {"Fn::Equals" : [{"Ref" :"ExistingDedupDdbTableName" }, ""]}
    },
    "Outputs" : {
        "DedupDdbTableName" : {
            "Description": "Dedup table name",
            "Value" : {"Ref": "DdupeDdbTable"},
            "Condition" : "createDdbTable"
        },
        "EncryptLambdaArn" : {
            "Description": "Encrypt Lambda ARN",
            "Value" : { "Fn::GetAtt" : [ "EncryptLambdaFunction", "Arn" ]}
        },
        "SsmParamLambdaArn" : {
            "Description": "Encrypt Lambda ARN",
            "Value" : { "Fn::GetAtt" : [ "SsmParameterLambdaFunction", "Arn" ]}
        },
        "KmsKeyArn" : {
            "Description": "KMS key ARN",
            "Value" : { "Fn::GetAtt" : [ "LambdaKmsKey", "Arn" ]}
        },
        "CollectLambdaRoleArn" : {
            "Description": "Role ARN for collect Lambda function",
            "Value" : { "Fn::GetAtt" : [ "CollectLambdaRole", "Arn" ]}
        },
        "EncryptLambdaRoleArn" : {
            "Description": "Role ARN for encrypt Lambda function",
            "Value" : { "Fn::GetAtt" : [ "EncryptLambdaRole", "Arn" ]}
        }
    },
    "Resources":{
        "DdupeDdbTable": {
            "Type" : "AWS::DynamoDB::Table",
            "Condition": "createDdbTable",
            "Properties" : {
                "TableName": {
                    "Fn::Join": [
                       "",
                       [
                         {"Ref": "SharedResourcePrefix"},
                         "PawsCollectorStates"
                       ]
                     ]
                },
                "AttributeDefinitions": [
                    {
                        "AttributeName" : "CollectorId",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName" : "MessageId",
                        "AttributeType": "S"
                    }
                ],
                "BillingMode" : "PAY_PER_REQUEST",
                "KeySchema" : [
                    {
                        "AttributeName" : "CollectorId",
                        "KeyType" : "HASH"
                    },
                    {
                        "AttributeName" : "MessageId",
                        "KeyType" : "RANGE"
                    }
                ],
                "TimeToLiveSpecification" : {
                    "AttributeName" : "ExpireDate",
                    "Enabled" : true
                }
            }
      },
      "CollectLambdaRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "RoleName": {
                "Fn::Join": [
                    "",
                    [
                        {"Ref": "SharedResourcePrefix"},
                        "PawsCollectLambdaRole"
                    ]
                ]
            },
            "Path":"/",
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            }
         }
      },
      "LambdaKmsKey": {
            "Type": "AWS::KMS::Key",
            "DependsOn":[
                "CollectLambdaRole",
                "EncryptLambdaRole"
            ],
            "Properties": {
               "Description": "kms key used to encrypt credentials for lambda",
               "KeyPolicy": {
                    "Version": "2012-10-17",
                    "Id": "al-kms-policy",
                    "Statement": [
                        {
                            "Sid": "Enable IAM User Permissions",
                            "Effect": "Allow",
                            "Principal": {
                            "AWS": {
                             "Fn::Join": [
                               ":",
                               [
                                 "arn:aws:iam",
                                 "",
                                 {
                                   "Ref": "AWS::AccountId"
                                 },
                                 "root"
                               ]
                             ]
                            }
                            },
                            "Action": "kms:*",
                            "Resource": "*"
                       }
                    ]
                },
                "Tags": [
                    {
                        "Key": "AlertLogic",
                        "Value": "Collect"
                    }
                ]
            }
        },
        "EncryptLambdaRole":{
            "Type":"AWS::IAM::Role",
            "Properties":{
                "RoleName": {
                    "Fn::Join": [
                        "",
                        [
                            {"Ref": "SharedResourcePrefix"},
                            "PawsEncryptLambdaRole"
                        ]
                    ]
                },
                "Path":"/",
                "AssumeRolePolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Principal":{
                                "Service":[
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                   ]
                }
            }
        },
        "EncryptLambdaPolicy":{
            "Type":"AWS::IAM::Policy",
            "DependsOn":[
                "EncryptLambdaRole",
                "EncryptLambdaFunction",
                "SsmParameterLambdaFunction"
            ],
            "Properties":{
                "Roles":[
                   {
                      "Ref":"EncryptLambdaRole"
                   }
                ],
                "PolicyName":"alertlogic-encrypt-lambda-policy",
                "PolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Action":"logs:CreateLogGroup",
                            "Resource":[
                                {
                                    "Fn::Join":[
                                        "",
                                        [
                                            "arn:aws:logs:",
                                            {
                                                "Ref":"AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref":"AWS::AccountId"
                                            },
                                            ":log-group:/aws/lambda/",
                                            {
                                                "Ref":"EncryptLambdaFunction"
                                            },
                                            ":*"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join":[
                                        "",
                                        [
                                            "arn:aws:logs:",
                                            {
                                                "Ref":"AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref":"AWS::AccountId"
                                            },
                                            ":log-group:/aws/lambda/",
                                            {
                                                "Ref":"SsmParameterLambdaFunction"
                                            },
                                            ":*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Effect":"Allow",
                            "Action":[
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource":[
                                {
                                   "Fn::Join":[
                                        "",
                                        [
                                            "arn:aws:logs:",
                                            {
                                                "Ref":"AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref":"AWS::AccountId"
                                            },
                                            ":log-group:/aws/lambda/",
                                            {
                                                "Ref":"EncryptLambdaFunction"
                                            },
                                            ":log-stream:*"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join":[
                                         "",
                                         [
                                             "arn:aws:logs:",
                                             {
                                                 "Ref":"AWS::Region"
                                             },
                                             ":",
                                             {
                                                 "Ref":"AWS::AccountId"
                                             },
                                             ":log-group:/aws/lambda/",
                                             {
                                                 "Ref":"SsmParameterLambdaFunction"
                                             },
                                             ":log-stream:*"
                                         ]
                                     ]
                                 }
                            ]
                        },
                        {
                            "Effect":"Allow",
                            "Action":[
                                "ssm:GetParameter",
                                "ssm:PutParameter",
                                "ssm:DeleteParameter",
                                "ssm:AddTagsToResource"
                            ],
                            "Resource":[
                                { "Fn::Join":["", [
                                    "arn:aws:ssm:",
                                    {"Ref": "AWS::Region"},
                                    ":",
                                    {"Ref": "AWS::AccountId"},
                                    ":parameter/PAWS-SECRET*"
                                   ]]
                                }
                            ]
                        },
                        {
                            "Action": [
                                "kms:Encrypt",
                                "kms:Decrypt"
                            ],
                            "Resource": [
                                { "Fn::GetAtt" : [ "LambdaKmsKey", "Arn" ]}
                            ],
                            "Effect": "Allow"
                        }
                    ]
                }
            }
        },
        "EncryptLambdaFunction":{
            "Type":"AWS::Lambda::Function",
            "DependsOn":[
                "EncryptLambdaRole"
            ],
            "Properties":{
                "FunctionName": {
                    "Fn::Join": [
                        "",
                        [
                            {"Ref": "SharedResourcePrefix"},
                            "PawsEncryptLambdaFunction"
                        ]
                    ]
                },
                "Description":"Alert Logic Lambda Encrypt function",
                "Role":{
                    "Fn::GetAtt":[
                        "EncryptLambdaRole",
                        "Arn"
                    ]
                },
                "Code":{
                    "ZipFile": {
                       "Fn::Join": [
                           "",
                           [
                                "const AWS = require('aws-sdk');\n",
                                "const response = require('./cfn-response');\n",
                                "\n",
                                "\n",
                                "function encrypt(event, context) {\n",
                                "    const params = {\n",
                                "        KeyId: event.ResourceProperties.KeyId,\n",
                                "        Plaintext: event.ResourceProperties.Plaintext\n",
                                "    };\n",
                                "    const kms = new AWS.KMS();\n",
                                "    kms.encrypt(params, function(err, data) {\n",
                                "        if (err) {\n",
                                "            console.log(err, err.stack); // an error occurred\n",
                                "            return response.send(event, context, response.FAILED);\n",
                                "        }\n",
                                "        var base64 = new Buffer(data.CiphertextBlob).toString('base64');\n",
                                "        var responseData = {\n",
                                "            EncryptedText : base64\n",
                                "        };\n",
                                "        return response.send(event, context, response.SUCCESS, responseData);\n",
                                "    });\n",
                                "}\n",
                                "\n",
                                "\n",
                                "exports.handler = (event, context, callback) => {\n",
                                "    if (event.ResourceType == 'AWS::CloudFormation::CustomResource' &&\n",
                                "        (event.RequestType == 'Create' || event.RequestType == 'Update')) {\n",
                                "        return encrypt(event, context);\n",
                                "    }\n",
                                "    return response.send(event, context, response.SUCCESS);\n",
                                "}"
                            ]
                        ]
                    }
                },
                "Handler":"index.handler",
                "Runtime":"nodejs12.x",
                "MemorySize":128,
                "Timeout": 5,
                "Tags": [
                    {
                        "Key": "AlertLogic",
                        "Value": "Collect"
                    }
                ]
            }
        },
        "SsmParameterLambdaFunction":{
            "Type":"AWS::Lambda::Function",
            "DependsOn":[
                "EncryptLambdaRole"
            ],
            "Properties":{
                "FunctionName": {
                    "Fn::Join": [
                        "",
                        [
                            {"Ref": "SharedResourcePrefix"},
                            "PawsSsmParamLambdaFunction"
                        ]
                    ]
                },
                "Description":"Alert Logic System manager parameter creation Lambda function",
                "Role":{
                    "Fn::GetAtt":[
                        "EncryptLambdaRole",
                        "Arn"
                     ]
                },
                "Code":{
                    "ZipFile": {
                       "Fn::Join": [
                           "",
                           [
                                "const AWS = require('aws-sdk');\n",
                                "const response = require('./cfn-response');\n",
                                "\n",
                                "\n",
                                "function createSSMParam(event, context) {\n",
                                "    var params = {\n",
                                "        Name: event.ResourceProperties.Name,\n",
                                "        Type: 'SecureString',\n",
                                "        KeyId: event.ResourceProperties.KeyId,\n",
                                "        Value: event.ResourceProperties.Plaintext,\n",
                                "        Tier: event.ResourceProperties.Tier,\n",
                                "        Tags: event.ResourceProperties.Tags",
                                "    };\n",
                                "    const ssm = new AWS.SSM();\n",
                                "    ssm.putParameter(params, function(err, data) {\n",
                                "        if (err) {\n",
                                "            console.log(err, err.stack); // an error occurred\n",
                                "            return response.send(event, context, response.FAILED);\n",
                                "        }\n",
                                "        data.PawsSecretParamName = params.Name\n",
                                "        return response.send(event, context, response.SUCCESS, data);\n",
                                "    });\n",
                                "}\n",
                                "\n",
                                "function deleteSSMParam(event, context) {\n",
                                "    var params = {\n",
                                "        Name: event.ResourceProperties.Name\n",
                                "    };\n",
                                "    const ssm = new AWS.SSM();\n",
                                "    ssm.deleteParameter(params, function(err, data) {\n",
                                "        if (err) {\n",
                                "            console.log(err, err.stack); // an error occurred\n",
                                "            return response.send(event, context, response.FAILED);\n",
                                "        }\n",
                                "        return response.send(event, context, response.SUCCESS, data);\n",
                                "    });\n",
                                "}\n",
                                "\n",
                                "exports.handler = (event, context, callback) => {\n",
                                "    if (event.ResourceType == 'AWS::CloudFormation::CustomResource' &&\n",
                                "        (event.RequestType == 'Create' || event.RequestType == 'Update')) {\n",
                                "        return createSSMParam(event, context);\n",
                                "     } else if (event.ResourceType == 'AWS::CloudFormation::CustomResource' &&\n",
                                "        (event.RequestType == 'Delete')) {\n",
                                "        return deleteSSMParam(event, context);\n",
                                "    }\n",
                                "    return response.send(event, context, response.SUCCESS);\n",
                                "}"
                            ]
                        ]
                    }
                },
                "Handler":"index.handler",
                "Runtime":"nodejs12.x",
                "MemorySize":128,
                "Timeout": 5,
                "Tags": [
                    {
                        "Key": "AlertLogic",
                        "Value": "Collect"
                    }
                ]
            }
        },
      "CollectLambdaPolicy":{
         "Type":"AWS::IAM::Policy",
         "DependsOn":[
            "CollectLambdaRole"
         ],
         "Properties":{
            "Roles":[
               {
                  "Ref":"CollectLambdaRole"
               }
            ],
            "PolicyName":"alertlogic-paws-lambda-policy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":"logs:CreateLogGroup",
                     "Resource":[{
                       "Fn::Join":[ "",
                          [
                             "arn:aws:logs:", { "Ref":"AWS::Region" },
                             ":", { "Ref":"AWS::AccountId" },
                             ":log-group:/aws/lambda/*:*"
                          ]
                       ]
                     }]
                  },
                  {
                      "Effect":"Allow",
                      "Action":[
                          "ssm:GetParameter",
                          "ssm:PutParameter"
                      ],
                      "Resource":[
                          { "Fn::Join":["", [
                              "arn:aws:ssm:",
                              {"Ref": "AWS::Region"},
                              ":",
                              {"Ref": "AWS::AccountId"},
                              ":parameter/PAWS-SECRET*"
                            ]]
                          }
                      ]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                     ],
                     "Resource":[ {
                       "Fn::Join":["",
                          [
                             "arn:aws:logs:", { "Ref":"AWS::Region" },
                             ":", { "Ref":"AWS::AccountId" },
                             ":log-group:/aws/lambda/*:log-stream:*"
                          ]
                       ]
                     }]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "lambda:*"
                     ],
                     "Resource":"*"
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "s3:Get*"
                     ],
                     "Resource":[{
                       "Fn::Join":["",
                          [
                             "arn:aws:s3:::",
                             {
                                "Fn::Join" : ["", [
                                    { "Ref" : "PackagesBucketPrefix" }, "-",
                                    { "Ref" : "AWS::Region" }
                                ]]
                             },
                             "/*"
                          ]
                       ]
                     }]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem"
                     ],
                     "Resource":[{
                       "Fn::Join":["",
                          [
                             "arn:aws:dynamodb:",
                             { "Ref" : "AWS::Region" }, ":",
                             { "Ref" : "AWS::AccountId"}, ":",
                             "table/",
                             {
                                "Fn::If": [
                                    "createDdbTable",
                                    {"Ref": "DdupeDdbTable"},
                                    {"Ref": "ExistingDedupDdbTableName"} 
                                ]
                             }
                          ]
                       ]
                     }]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "sqs:*"
                     ],
                     "Resource":"*"
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "kms:Decrypt",
                        "kms:Encrypt"
                     ],
                     "Resource":[
                        {"Fn::GetAtt":["LambdaKmsKey","Arn"]},
                     ]
                  }
               ]
            }
         }
      },
      "HealthCheckLambdaPolicy":{
          "Type":"AWS::IAM::Policy",
          "DependsOn":[
              "CollectLambdaRole"
          ],
          "Properties":{
            "Roles":[
               {
                  "Ref":"CollectLambdaRole"
               }
            ],
            "PolicyName":"alertlogic-health-check-lambda-policy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "cloudformation:DescribeStacks"
                     ],
                     "Resource": "*"
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "lambda:ListEventSourceMappings"
                     ],
                     "Resource": "*"
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "cloudwatch:Get*",
                        "cloudwatch:Describe*",
                        "cloudwatch:List*",
                        "cloudwatch:Put*"
                     ],
                     "Resource": "*"
                  }
               ]
            }
          }
        }
    }
}
